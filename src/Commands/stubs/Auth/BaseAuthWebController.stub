<?php

namespace {namespace};

use App\Http\Controllers\Controller;
use {ServiceNameSpace}\User\IUserService;
use {requestsNamespace}\AuthRequests\AuthLoginRequest;
use {requestsNamespace}\AuthRequests\UpdateUserRequest;
use {requestsNamespace}\AuthRequests\AuthRegisterRequest;
use {requestsNamespace}\AuthRequests\ResetPasswordRequest;
use {requestsNamespace}\AuthRequests\CheckPasswordResetRequest;
use {requestsNamespace}\AuthRequests\RequestResetPasswordRequest;

class BaseAuthController extends Controller
{
    private IUserService $userService;
    private $role = null;

    public function __construct(IUserService $userService)
    {
        $this->userService = $userService;
    }

    public function roleHook(string $role)
    {
        $this->role = $role;
    }

    public function login(AuthLoginRequest $request)
    {
        //you can pass additional data as an array for the third parameter in the
        //login method and this data will be stored in the users table
        $user = $this->userService->login($request->validated(), $this->role, []);
        if ($user) {
            return view('user-details', compact('user'));
        } else {
            return redirect()->back()->with('error', __('site.credentials_not_match_records'));
        }
    }

    public function register(AuthRegisterRequest $request)
    {
        $user = $this->userService->register($request->validated(), $this->role);
        if ($user) {
            return view('user-details', compact('user'));
        } else {
            return redirect()->back()->with('error', __('site.something_went_wrong'));
        }
    }

    public function updateUserData(UpdateUserRequest $request)
    {
        $user = $this->userService->register($request->validated(), $this->role);

        if ($user) {
            return view('user-details', compact('user'));
        } else {
            return redirect()->back()->with('error', __('site.something_went_wrong'));
        }
    }

    public function userDetails()
    {
        $user = $this->userService->showUserDetails($this->role);

        if ($user) {
            return view('user-details', compact('user'));
        } else {
            return redirect()->back()->with('error', __('site.something_went_wrong'));
        }
    }

    public function requestResetPasswordCode(RequestResetPasswordRequest $request)
    {
        $result = $this->userService->passwordResetRequest($request->email);
        if ($result) {
            return view('check-reset-code');
        } else {
            return redirect()->back()->with('error', __('site.something_went_wrong'));
        }
    }

    public function validateResetPasswordCode(CheckPasswordResetRequest $request)
    {
        $request->validated();
        return view('reset-password');
    }

    public function changePassword(ResetPasswordRequest $request)
    {
        $data = $request->validated();
        $result = $this->userService->passwordReset($data['reset_password_code'], $data['password']);

        if ($result) {
            session()->put('success', __('site.password_changed_successfully'));
            return view('login');
        } else {
            return redirect()->back()->with('error', __('site.something_went_wrong'));
        }
    }

    public function logout()
    {
        $this->userService->logout();
        return redirect('/');
    }
}