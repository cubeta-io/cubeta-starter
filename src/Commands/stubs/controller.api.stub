<?php

namespace App\Http\Controllers\API\v1;

use App\Http\Requests\{modelName}Requests\StoreUpdate{modelName}Request;
use App\Http\Resources\{modelName}Resource;
use Cubeta\CubetaStarter\Contracts\ApiController;
use App\Services\{modelName}\I{modelName}Service;

class {modelName}Controller extends ApiController{

    private ${modelNameLower}Service;

    public function __construct(I{modelName}Service ${modelNameLower}Service) {

        $this->{modelNameLower}Service = ${modelNameLower}Service;

    }

     public function index()
    {
        $items = $this->{modelNameLower}Service->indexWithPagination([]);
        if ($items) {
            return $this->apiResponse({modelName}Resource::collection($items['data']), self::STATUS_OK, __('site.get_successfully'), $items['pagination_data']);
        }

        return $this->apiResponse([], self::STATUS_OK, __('site.there_is_no_data'));
    }

    public function show(${modelNameLower}_id)
    {
        $item = $this->{modelNameLower}Service->view(${modelNameLower}_id, []);
        if ($item) {
            return $this->apiResponse(new {modelName}Resource($item), self::STATUS_OK, __('site.get_successfully'));
        }

        return $this->apiResponse(null, self::STATUS_OK, __('site.there_is_no_data'));
    }

    public function store(StoreUpdate{modelName}Request $request)
    {
        $item = $this->{modelNameLower}Service->store($request->validated());
        if ($item) {
            return $this->apiResponse(new {modelName}Resource($item), self::STATUS_OK, __('site.created_successfully'));
        }

        return $this->apiResponse(null, self::STATUS_OK, __('site.there_is_no_data'));
    }

    public function update(${modelNameLower}_id, StoreUpdate{modelName}Request $request)
    {
        $item = $this->{modelNameLower}Service->update($request->validated(), ${modelNameLower}_id);
        if ($item) {
            return $this->apiResponse(new {modelName}Resource($item), self::STATUS_OK, __('site.updated_successfully'));
        }

        return $this->apiResponse(null, self::STATUS_OK, __('site.there_is_no_data'));
    }

    public function destroy(${modelNameLower}_id)
    {
        $item = $this->{modelNameLower}Service->delete(${modelNameLower}_id);
        if ($item) {
            return $this->apiResponse(true, self::STATUS_OK, __('site.delete_successfully'));
        }

        return $this->apiResponse(false, self::STATUS_OK, __('site.there_is_no_data'));
    }
}
