<?php

namespace {namespace};

use App\Http\Requests\{modelName}\StoreUpdate{modelName}Request;
use App\Http\Resources\{modelName}Resource;
use Cubeta\CubetaStarter\Contracts\ApiController;
use App\Services\{modelName}\I{modelName}Service;

class {modelName}Controller extends ApiController{

    private ${variableNaming}Service;

    public function __construct(I{modelName}Service ${variableNaming}Service) {

        $this->{variableNaming}Service = ${variableNaming}Service;

    }

     public function index()
    {
        $items = $this->{variableNaming}Service->indexWithPagination([]);
        if ($items) {
            return $this->apiResponse({modelName}Resource::collection($items['data']), self::STATUS_OK, __('site.get_successfully'), $items['pagination_data']);
        }

        return $this->apiResponse([], self::STATUS_OK, __('site.there_is_no_data'));
    }

    public function show(${variableNaming}_id)
    {
        $item = $this->{variableNaming}Service->view(${variableNaming}_id, []);
        if ($item) {
            return $this->apiResponse(new {modelName}Resource($item), self::STATUS_OK, __('site.get_successfully'));
        }

        return $this->apiResponse(null, self::STATUS_OK, __('site.there_is_no_data'));
    }

    public function store(StoreUpdate{modelName}Request $request)
    {
        $item = $this->{variableNaming}Service->store($request->validated() , []);
        if ($item) {
            return $this->apiResponse(new {modelName}Resource($item), self::STATUS_OK, __('site.created_successfully'));
        }

        return $this->apiResponse(null, self::STATUS_OK, __('site.there_is_no_data'));
    }

    public function update(${variableNaming}_id, StoreUpdate{modelName}Request $request)
    {
        $item = $this->{variableNaming}Service->update($request->validated(), ${variableNaming}_id);
        if ($item) {
            return $this->apiResponse(new {modelName}Resource($item), self::STATUS_OK, __('site.updated_successfully'));
        }

        return $this->apiResponse(null, self::STATUS_OK, __('site.there_is_no_data'));
    }

    public function destroy(${variableNaming}_id)
    {
        $item = $this->{variableNaming}Service->delete(${variableNaming}_id);
        if ($item) {
            return $this->apiResponse(true, self::STATUS_OK, __('site.delete_successfully'));
        }

        return $this->apiResponse(false, self::STATUS_OK, __('site.there_is_no_data'));
    }
}
