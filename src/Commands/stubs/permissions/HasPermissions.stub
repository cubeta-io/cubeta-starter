<?php

namespace {{traitsNamespace}};

use {{modelsNamespace}}\ModelHasPermission;
use {{modelsNamespace}}\Role;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\MorphMany;
use Illuminate\Support\Arr;
use Illuminate\Support\Str;

/**
 * @mixin Model
 */
trait HasPermissions
{
    /**
     * this method assign a permission to access given model
     * it returns true when the permission created successfully
     * and false when the permission is already exist for the current user on this model or in one of the user roles
     * @param string|array{string} $permission
     * @param class-string<Model> $model
     * @return bool
     */
    public function assignPermission(string|array $permission, string $model): bool
    {
        /** @var ModelHasPermission|null $ownerPermission */
        $ownerPermission = $this->permissions()
            ->firstWhere('model_name', $model);

        $permission = Arr::wrap($permission);

        if ($ownerPermission) {
            $ownerPermission->update([
                'permissions' => array_merge($ownerPermission->permissions, $permission)
            ]);
        } else {
            $this->permissions()->create([
                'model_name' => $model,
                'permissions' => $permission
            ]);

        }

        return true;
    }

    /**
     * @return MorphMany
     */
    public function permissions(): MorphMany
    {
        return $this->morphMany(ModelHasPermission::class, 'model');
    }

    /**
     * @param string $permissionName
     * @param class-string<Model> $model
     * @return void
     */
    public function removePermission(string $permissionName, string $model): void
    {
        if (!$this->hasPermission($permissionName, $model)) {
            return;
        }

        /** @var ModelHasPermission $permission */
        $permission = $this->permissions()
            ->firstWhere('model_name', $model);

        if (!$permission) return;

        $permission->permissions = collect($permission->permissions)
            ->filter(fn($value) => ($value != $permissionName))
            ->values()
            ->toArray();

        $permission->save();
    }

    /**
     * if the provided permission isn't in the authorizedActions() returned array in the provided model the method will return true .
     * Additional action is that you can provide an instance of the model to check for the abilities that is correspond
     * to the provided permission
     * @param string $permission
     * @param string $model
     * @param Model|null $modelInstance
     * @return bool
     */
    public function hasPermission(string $permission, string $model, ?Model $modelInstance = null): bool
    {
        if (!method_exists($model, 'authorizedActions')) {
            return true;
        }

        if (!in_array($permission, $model::authorizedActions())) {
            return true;
        }

        if ($this instanceof Role) {
            return $this->checkRoleHasPermission($permission, $model);
        }

        return $this->checkModelHasPermission($permission, $model, $modelInstance);
    }

    /**
     * @param string $permission
     * @param class-string<Model> $model
     * @return bool
     */
    private function checkRoleHasPermission(string $permission, string $model): bool
    {
        $rolePermissions = $this->permissions()
            ->where('model_name', $model)
            ->first();

        if (!$rolePermissions) {
            return false;
        }

        if (in_array($permission, $rolePermissions->permissions)) {
            return true;
        }

        return false;
    }

    /**
     * @param string $permission
     * @param class-string<Model> $model
     * @param Model|null $modelInstance
     * @return bool
     */
    private function checkModelHasPermission(string $permission, string $model, ?Model $modelInstance = null): bool
    {
        $permissions = ModelHasPermission::where(function (Builder $query) use ($model) {
            return $query
                ->where('model_has_permissions.model_name', $model)
                ->where('model_has_permissions.model_type', get_class($this))
                ->where('model_has_permissions.model_id', $this->id);
        })->orWhere(function (Builder $query) use ($model) {
            return $query
                ->where('model_has_permissions.model_type', Role::class)
                ->whereIn('model_has_permissions.model_id', $this->roles()->pluck('roles.id')->toArray())
                ->where('model_has_permissions.model_name', $model);
        })->pluck('permissions')->flatten();

        $attributeName = Str::camel('can-' . $permission);

        if ($permissions->contains($permission)) {
            return $this->applyAbilityIfExist($modelInstance, $model, $attributeName);
        }

        return false;
    }

    /**
     * @param Model|null $modelInstance
     * @param string $model
     * @param string $attributeName
     * @return bool
     */
    private function applyAbilityIfExist(?Model $modelInstance, string $model, string $attributeName): bool
    {
        if (isset($modelInstance)
            && $modelInstance instanceof $model
            && method_exists($modelInstance, $attributeName)
        ) {
            return (bool)$modelInstance->{"$attributeName"}();
        }

        return true;
    }

    /**
     * @param Builder $query
     * @param string $permission
     * @param class-string<Model> $model
     * @return void
     */
    public function scopeByPermission(Builder $query, string $permission, string $model): void
    {
        $query->whereHas('permissions', function (Builder $builder) use ($permission, $model) {
            $builder->where('model_name', $model)
                ->whereJsonContains('permissions', $permission);
        })->when(!($this instanceof Role), function (Builder $query) use ($model, $permission) {
            $query->orWhereHas('roles', function (Builder $builder) use ($permission, $model) {
                $builder->whereHas('permissions', function (Builder $q) use ($permission, $model) {
                    $q->where('model_name', $model)
                        ->whereJsonContains('permissions', $permission);
                });
            });
        });
    }
}
