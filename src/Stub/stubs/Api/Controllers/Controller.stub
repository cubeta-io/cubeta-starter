<?php

namespace {{namespace}};

use {{request_namespace}};
use {{service_namespace}};
use {{resource_namespace}};
use {{model_namespace}};
use App\Http\Controllers\ApiController;
use Illuminate\Http\Request;

class {{model_name}}Controller extends ApiController{

    private {{model_name}}Service ${{service_name}}Service;

    public function __construct() {
        $this->{{service_name}}Service = {{model_name}}Service::make();
        // place the relations you want to return them within the response
        $this->relations = [] ;
    }

     public function index()
    {
        $items = $this->{{service_name}}Service->indexWithPagination($this->relations);
        return rest()
           ->ok()
           ->getSuccess()
           ->data($items)
           ->send();
    }

    public function show(${{id_variable}})
    {
        $item = $this->{{service_name}}Service->view(${{id_variable}}, $this->relations);
        return rest()
           ->when(
                $item,
                fn($rest) => $rest->getSuccess()->data($item),
                fn($rest) => $rest->noData()
           )->send();
    }

    public function store(StoreUpdate{{model_name}}Request $request)
    {
        $item = $this->{{service_name}}Service->store($request->validated() , $this->relations);
        return rest()
           ->when(
                $item,
                fn($rest) => $rest->storeSuccess()->data($item),
                fn($rest) => $rest->noData()
           )->send();
    }

    public function update(${{id_variable}}, StoreUpdate{{model_name}}Request $request)
    {
        $item = $this->{{service_name}}Service->update($request->validated(), ${{id_variable}} , $this->relations);
        return rest()
           ->when(
                $item,
                fn($rest) => $rest->updateSuccess()->data($item),
                fn($rest) => $rest->noData()
           )->send();
    }

    public function destroy(${{id_variable}})
    {
        $item = $this->{{service_name}}Service->delete(${{id_variable}});
        return rest()
            ->when(
                $item,
                fn($rest) => $rest->ok()->deleteSuccess(),
                fn($rest) => $rest->noData(),
            )->send();
    }

    public function export(Request $request)
    {
        $ids = $request->ids ?? [];

        return $this->{{service_name}}Service->export($ids);
    }

    public function getImportExample()
    {
        return $this->{{service_name}}Service->getImportExample();
    }

    public function import(Request $request)
    {
        $request->validate([
            'excel_file' => 'required|mimes:xls,xlsx',
        ]);

        $this->{{service_name}}Service->import();
    }
}
