<?php

namespace App\Traits;

use Illuminate\Database\Eloquent\Model;
use Yajra\DataTables\EloquentDataTable;

trait DataTablesTrait
{
    /**
     * @param Model  $item      this for sending the id or whatever identifier for the routes
     * @param string $routeName this will be suffixed with (.show, .edit, .delete), so just provide the base name for
     *                          the route
     */
    public function crudButtons(Model $item, string $routeName, array $exceptActions = [], string $additionalActions = ''): string
    {
        $buttons = "<div class='d-flex'>";
        if (!in_array('show', $exceptActions)) {
            $buttons .= "<div class='p-1'>
                            <a href='" . route("$routeName.show", $item->id) . "' class='btn btn-xs btn-info'>
                                <i class='bi bi-chevron-bar-right'></i>
                            </a>
                        </div>";
        }
        if (!in_array('edit', $exceptActions)) {
            $buttons .= "<div class='p-1'>
                            <a href='" . route("$routeName.edit", $item->id) . "' class='btn btn-xs btn-success'>
                                <i class='bi bi-pencil-square'></i>
                            </a>
                        </div>";
        }
        if (!in_array('destroy', $exceptActions)) {
            $buttons .= "<div class='p-1'>
                            <button type='button' class='btn btn-xs btn-danger remove-item-from-table-btn'
                                    data-deleteurl ='" . route("$routeName.destroy", $item->id) . "' >
                                <i class='bi bi-trash3-fill'></i>
                            </button>
                        </div>";
        }
        $buttons .= $additionalActions;
        $buttons .= '</div>';

        return $buttons;
    }

    /**
     * @param EloquentDataTable                                                $query
     * @param array{array{orderIndex: int,columnIndex: int,columnName:string}} $columns
     * @return EloquentDataTable
     */
    public function orderTranslatableColumns(EloquentDataTable $query, array $columns): EloquentDataTable
    {
        $locale = app()->getLocale();

        if (!in_array($locale, config('cubeta-starter.available_locales'))) {
            return $query;
        }

        foreach ($columns as $column) {
            $orderIndex = $column['orderIndex'];
            $columnIndex = $column['columnIndex'];
            $columnName = $column['columnName'];


            $order = request('order');
            $orderColumn = $order[$orderIndex]['column'] ?? null;
            $orderDir = strtoupper($order[$orderIndex]['dir'] ?? "ASC");

            if (!in_array($orderDir, ["ASC", "DESC"])) {
                continue;
            }

            if ($orderColumn == $columnIndex) {
                $query->order(function ($query) use ($orderDir, $locale, $orderIndex, $columnName) {
                    $query->orderByRaw("JSON_EXTRACT($columnName, '\$.$locale') $orderDir");
                });
            }
        }
        return $query;
    }
}
