<?php

namespace {{namespace}};

use {{requestNamespace}}\AuthRequests\RequestResetPasswordRequest;
use {{requestNamespace}}\AuthRequests\CheckPasswordResetRequest;
use {{requestNamespace}}\AuthRequests\ResetPasswordRequest;
use {{requestNamespace}}\AuthRequests\AuthRegisterRequest;
use {{requestNamespace}}\AuthRequests\UpdateUserRequest;
use {{requestNamespace}}\AuthRequests\AuthLoginRequest;
use {{serviceNamespace}}\User\UserService;
use App\Http\Controllers\ApiController;
use {{resourceNamespace}}\UserResource;
use Illuminate\Http\Request;
use Exception;

class BaseAuthController extends ApiController
{
    private UserService $userService;
    private ?string $role = null;

    /**
     * @throws Exception
     */
    public function __construct()
    {
        $this->userService = UserService::make();
        $this->userService->setGuard();
    }

    public function roleHook(string $role)
    {
        $this->role = $role;
    }

    public function login(AuthLoginRequest $request)
    {
        //you can pass additional data as an array for the third parameter in the
        //login method and this data will be stored in the users table
        $result = $this->userService->login($request->validated(), $this->role, []);
        if (!$result || !is_array($result)) {
            return rest()->message(__('site.credentials_not_match_records'))->send();
        }

        [$user, $token, $refresh_token] = $result;
        return rest()
            ->data([
                       'user'          => new UserResource($user),
                       'token'         => $token,
                       'refresh_token' => $refresh_token,
           ])->message(__('site.successfully_logged_in'))
           ->ok()
           ->send();
    }

    public function logout()
    {
        $this->userService->logout();

        return rest()->ok()->message(__('site.logout_success'))->send();
    }

    public function refresh(Request $request)
    {
        $result = $this->userService->refresh_token();
        if (!$result || !is_array($result)) {
            return rest()->notAuthorized()->message(__('site.token_refreshed_failed'))->send();
        }
        [$user, $token, $refresh_token] = $result;
        return rest()
            ->data([
                       'user'          => new UserResource($user),
                       'token'         => $token,
                       'refresh_token' => $refresh_token,
           ])->message(__('site.token_refreshed_successfully'))
           ->ok()
           ->send();
    }

    public function register(AuthRegisterRequest $request)
    {
        $result = $this->userService->register($request->validated(), $this->role);

        if (!$result || !is_array($result)) {
            return rest()->noData()->message(__('site.failed'))->send();
        }

        [$user, $token, $refresh_token] = $result;
        return rest()
            ->data([
                       'user'          => new UserResource($user),
                       'token'         => $token,
                       'refresh_token' => $refresh_token,
           ])->message(__('site.registered_successfully'))
           ->ok()
           ->send();
    }

    public function passwordResetRequest(RequestResetPasswordRequest $request)
    {
        $result = $this->userService->passwordResetRequest($request->email);
        if ($result) {
            return rest()->ok()->message(__('site.password_reset_code_sent'))->send();
        }

        return rest()->notFound()->message( __('site.wrong_email'))->send();
    }

    public function checkPasswordResetCode(CheckPasswordResetRequest $request)
    {
        return rest()->ok()->message(__('site.code_correct'))->send();
    }

    public function passwordReset(ResetPasswordRequest $request)
    {
        $result = $this->userService->passwordReset($request->reset_password_code, $request->password);
        if ($result) {
            return rest()->ok()->message(__('site.password_reset_successful'))->send();
        }

        return rest()->notFound()->message(__('site.code_incorrect'))->send();
    }

    public function updateUserDetails(UpdateUserRequest $request)
    {
        $result = $this->userService->updateUserDetails($request->validated(), $this->role);

        if (!$result || !is_array($result)) {
            return rest()->notAuthorized()->message(__('site.unauthorized_user'))->send();
        }

        [$user, $token, $refresh_token] = $result;
        return rest()->data([
            'user'          => new UserResource($user),
            'token'         => $token,
            'refresh_token' => $refresh_token,
        ])->updateSuccess()
            ->ok()
            ->send();
    }

    public function userDetails()
    {
        $user = $this->userService->userDetails($this->role);

        if ($user) {
            return rest()->data($user)->getSuccess()->ok()->send();
        } else {
            return rest()->notAuthorized()->message(__('site.unauthorized_user'))->send();
        }
    }
}

