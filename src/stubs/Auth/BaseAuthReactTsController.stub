<?php

namespace {{namespace}};

use Exception;
use Inertia\Inertia;
use App\Http\Controllers\WebController;
use Illuminate\Support\Facades\Session;
use {{serviceNamespace}}\User\UserService;
use {{requestNamespace}}\AuthRequests\AuthLoginRequest;
use {{requestNamespace}}\AuthRequests\UpdateUserRequest;
use {{requestNamespace}}\AuthRequests\AuthRegisterRequest;
use {{requestNamespace}}\AuthRequests\ResetPasswordRequest;
use {{requestNamespace}}\AuthRequests\CheckPasswordResetRequest;
use {{requestNamespace}}\AuthRequests\RequestResetPasswordRequest;

class BaseAuthController extends Controller
{
    private UserService $userService;
    private ?string $role = null;

   /**
    * @throws Exception
    */
    public function __construct()
    {
        $this->userService = UserService::make();
        $this->userService->setGuard("web");
    }

    public function roleHook(string $role)
    {
        $this->role = $role;
    }

    public function login(AuthLoginRequest $request)
    {
        //you can pass additional data as an array for the third parameter in the
        //login method and this data will be stored in the users table
        $user = $this->userService->login($request->validated(), $this->role, []);
        if ($user) {
            return redirect()->route('{{user-details-route}}');
        } else {
            return redirect()->back();
        }
    }

    public function updateUserData(UpdateUserRequest $request)
    {
        $user = $this->userService->updateUserDetails($request->validated(), $this->role);

        if ($user) {
            return redirect()->route('{{user-details-route}}');
        } else {
            return redirect()->back();
        }
    }

    public function userDetails()
    {
        $user = $this->userService->userDetails($this->role);

        if ($user) {
            return Inertia::render('dashboard/profile/UserDetails' , [
                'user' => $user,
            ]);
        } else {
            return redirect()->back();
        }
    }

    public function requestResetPasswordCode(RequestResetPasswordRequest $request)
    {
        $result = $this->userService->passwordResetRequest($request->validated()['email']);
        if ($result) {
            return Inertia::render('auth/ResetPasswordCodeForm');
        } else {
            return redirect()->back();
        }
    }

    public function validateResetPasswordCode(CheckPasswordResetRequest $request)
    {
        $request->validated();
        return redirect()->route('{{password-reset-page}}');
    }

    public function changePassword(ResetPasswordRequest $request)
    {
        $data = $request->validated();
        $result = $this->userService->passwordReset($data['reset_password_code'], $data['password']);

        if ($result) {
            return redirect()->route('{{login-page-route}}');
        } else {
            return redirect()->back();
        }
    }

    public function register(AuthRegisterRequest $request)
    {
        $user = $this->userService->register($request->validated(), $this->role);
        if ($user) {
            return redirect()->route('{{user-details-route}}');
        } else {
            return redirect()->back();
        }
    }

    public function logout()
    {
        $this->userService->logout();
        return redirect()->route("{{login-page-route}}");
    }
}
