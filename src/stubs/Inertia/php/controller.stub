<?php
namespace {{namespace}};

use {{requestNamespace}}\{{modelName}}\StoreUpdate{{modelName}}Request;
use {{modelNamespace}}\{{modelName}};
use {{serviceNamespace}}\{{modelName}}\I{{modelName}}Service;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Inertia\Inertia;

class {{modelName}}Controller extends Controller
{

    private ${{modelNameCamelCase}}Service;

    // place the relations you want to return them within the response
    private array $relations = [{{relations}}];

    public function __construct(I{{modelName}}Service ${{modelNameCamelCase}}Service)
    {
        $this->{{modelNameCamelCase}}Service = ${{modelNameCamelCase}}Service;
    }

    public function data()
    {
        $items = $this->{{modelNameCamelCase}}Service->indexWithPagination($this->relations);
        return response()->json([
            'data' => $items['data'],
            'pagination_data' => $items['pagination_data'],
        ], 200);

        return response()->json([
            'data' => [],
            'pagination_data' => null,
        ], 200);
    }

    public function index()
    {
        return Inertia::render('{{indexPage}}');
    }

    public function show(${{modelNameCamelCase}}Id)
    {
        ${{modelNameCamelCase}} = $this->{{modelNameCamelCase}}Service->view(${{modelNameCamelCase}}Id , $this->relations);
        return Inertia::render('{{showPage}}', [
            '{{modelNameCamelCase}}' => ${{modelNameCamelCase}},
        ]);
    }

    public function create()
    {
        return Inertia::render('{{createForm}}');
    }

    public function store(StoreUpdate{{modelName}}Request $request)
    {
        /** @var {{modelName}}|null $item */
        ${{modelNameCamelCase}} = $this->{{modelNameCamelCase}}Service->store($request->validated(), $this->relations);
        if (${{modelNameCamelCase}}) {
            return redirect()->route('{{indexRoute}}', ${{modelNameCamelCase}}->id)->with('message' , __('site.stored_successfully'));
        }
        return redirect()->back()->with('error' , __('site.something_went_wrong'));
    }

    public function edit(${{modelNameCamelCase}}Id)
    {
        ${{modelNameCamelCase}} = $this->{{modelNameCamelCase}}Service->view(${{modelNameCamelCase}}Id , $this->relations);

        if (!${{modelNameCamelCase}}) {
            abort(404);
        }
        return Inertia::render('{{updateForm}}' , [
            '{{modelNameCamelCase}}' => ${{modelNameCamelCase}}
        ]);
    }

    public function update(StoreUpdate{{modelName}}Request $request, ${{modelNameCamelCase}}Id)
    {
        /** @var {{modelName}}|null $item */
        ${{modelNameCamelCase}} = $this->{{modelNameCamelCase}}Service->update($request->validated(), ${{modelNameCamelCase}}Id, $this->relations);
        if (${{modelNameCamelCase}}) {
            return redirect()->route('{{indexRoute}}', ${{modelNameCamelCase}}Id)->with('message' , __('site.update_successfully'));
        }
        else return redirect()->back()->with('error' , __('site.there_is_no_data'));
    }

    public function destroy(${{modelNameCamelCase}}Id)
    {
        $result = $this->{{modelNameCamelCase}}Service->delete(${{modelNameCamelCase}}Id);

        if ($result) {
            return response()->json(['message' => __("site.delete_successfully")], 200);
        }

        return response()->json(['message' => __('site.there_is_no_data')], 404);
    }
}
