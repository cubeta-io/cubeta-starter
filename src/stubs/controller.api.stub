<?php

namespace {namespace};

use {requestNamespace};
use {serviceNamespace};
use {resourceNamespace};
use {modelNamespace};
use App\Http\Controllers\ApiController;
use Illuminate\Http\Request;

class {modelName}Controller extends ApiController{

    private {modelName}Service ${variableNaming}Service;

    public function __construct() {

        $this->{variableNaming}Service = {modelName}Service::make();
        // place the relations you want to return them within the response
        $this->relations = [] ;
    }

     public function index()
    {
        $items = $this->{variableNaming}Service->indexWithPagination($this->relations);
        return rest()
           ->ok()
           ->getSuccess()
           ->data($items)
           ->send();
    }

    public function show(${idVariable})
    {
        $item = $this->{variableNaming}Service->view(${idVariable}, $this->relations);
        return rest()
           ->when(
                $item,
                fn($rest) => $rest->getSuccess()->data($item),
                fn($rest) => $rest->noData()
           )->send();
    }

    public function store(StoreUpdate{modelName}Request $request)
    {
        $item = $this->{variableNaming}Service->store($request->validated() , $this->relations);
        return rest()
           ->when(
                $item,
                fn($rest) => $rest->storeSuccess()->data($item),
                fn($rest) => $rest->noData()
           )->send();
    }

    public function update(${idVariable}, StoreUpdate{modelName}Request $request)
    {
        $item = $this->{variableNaming}Service->update($request->validated(), ${idVariable} , $this->relations);
        return rest()
           ->when(
                $item,
                fn($rest) => $rest->updateSuccess()->data($item),
                fn($rest) => $rest->noData()
           )->send();
    }

    public function destroy(${idVariable})
    {
        $item = $this->{variableNaming}Service->delete(${idVariable});
        return rest()
            ->when(
                $item->delete(),
                fn($rest) => $rest->ok()->deleteSuccess(),
                fn($rest) => $rest->noData(),
            )->send();
    }

    public function export(Request $request)
    {
        $ids = $request->ids ?? [];

        return $this->{variableNaming}Service->export($ids);
    }

    public function getImportExample()
    {
        return $this->{variableNaming}Service->getImportExample();
    }

    public function import(Request $request)
    {
        $request->validate([
            'excel_file' => 'required|mimes:xls,xlsx',
        ]);

        $this->{variableNaming}Service->import();
    }
}
