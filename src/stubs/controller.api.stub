<?php

namespace {namespace};

use {requestNamespace};
use {serviceNamespace};
use {resourceNamespace};
use {modelNamespace};
use App\Http\Controllers\ApiController;
use Illuminate\Http\Request;

class {modelName}Controller extends ApiController{

    private {modelName}Service ${variableNaming}Service;

    public function __construct() {

        $this->{variableNaming}Service = {modelName}Service::make();

        // place the relations you want to return them within the response
        $this->relations = [] ;
    }

     public function index()
    {
        $items = $this->{variableNaming}Service->indexWithPagination($this->relations);
        if ($items) {
            return $this->apiResponse({modelName}Resource::collection($items['data']), self::STATUS_OK, __('site.get_successfully'), $items['pagination_data']);
        }

        return $this->noData([]);
    }

    public function show(${idVariable})
    {
        /** @var {modelName}|null $item */
        $item = $this->{variableNaming}Service->view(${idVariable}, $this->relations);
        if ($item) {
            return $this->apiResponse(new {modelName}Resource($item), self::STATUS_OK, __('site.get_successfully'));
        }

        return $this->noData(null);
    }

    public function store(StoreUpdate{modelName}Request $request)
    {
        /** @var {modelName}|null $item */
        $item = $this->{variableNaming}Service->store($request->validated() , $this->relations);
        if ($item) {
            return $this->apiResponse(new {modelName}Resource($item), self::STATUS_OK, __('site.stored_successfully'));
        }

        return $this->apiResponse(null, self::STATUS_NOT_FOUND, __('site.something_went_wrong'));
    }

    public function update(${idVariable}, StoreUpdate{modelName}Request $request)
    {
        /** @var {modelName}|null $item */
        $item = $this->{variableNaming}Service->update($request->validated(), ${idVariable} , $this->relations);
        if ($item) {
            return $this->apiResponse(new {modelName}Resource($item), self::STATUS_OK, __('site.update_successfully'));
        }

        return $this->noData(null);
    }

    public function destroy(${idVariable})
    {
        $item = $this->{variableNaming}Service->delete(${idVariable});
        if ($item) {
            return $this->apiResponse(true, self::STATUS_OK, __('site.delete_successfully'));
        }

        return $this->noData(false);
    }

    public function export(Request $request)
    {
        $ids = $request->ids ?? [];

        return $this->{variableNaming}Service->export($ids);
    }

    public function getImportExample()
    {
        return $this->{variableNaming}Service->getImportExample();
    }

    public function import(Request $request)
    {
        $request->validate([
            'excel_file' => 'required|mimes:xls,xlsx',
        ]);

        $this->{variableNaming}Service->import();
    }
}
