<?php

namespace {namespace};

use App\Http\Controllers\Controller;
use {requestNamespace}\{modelName}\StoreUpdate{modelName}Request;
use {modelNamespace}\{modelName};
use {serviceNamespace}\{modelName}\{modelName}Service;
use Yajra\DataTables\Facades\DataTables;
use Illuminate\Http\Request;
use App\Traits\DataTablesTrait;


class {modelName}Controller extends Controller
{
    use DataTablesTrait;

    private {modelName}Service ${modelNameCamelCase}Service;

    // place the relations you want to return them within the response
    private array $relations = [];

    public function __construct()
    {
        $this->{modelNameCamelCase}Service = {modelName}Service::make();
    }


    /**
     * @throws \Exception
     */
    public function data()
    {
        $data = {modelName}::query()->with({loadedRelations})->select('{tableName}.*');

        $query = DataTables::eloquent($data)
            {addColumns}
            ->addColumn('action', function ({modelName} $row) {
                return $this->crudButtons($row, '{baseRouteName}');
            });

            {translationOrderQueries}

            return $query->rawColumns(['action' , {rawColumns}])->make(true);
    }


    public function index()
    {
        return view('{indexView}');
    }

    public function create()
    {
        return view('{createForm}');
    }

    public function show(${idVariable})
    {
        /** @var {modelName}|null ${modelNameCamelCase} */
        ${modelNameCamelCase} = $this->{modelNameCamelCase}Service->view(${idVariable}, $this->relations);
        if (${modelNameCamelCase}) {
            return view('{showView}', compact('{modelNameCamelCase}'));
        }
        return redirect()->back()->with('error' , __('site.there_is_no_data'));
    }

    public function store(StoreUpdate{modelName}Request $request)
    {
        /** @var {modelName}|null $item */
        ${modelNameCamelCase} = $this->{modelNameCamelCase}Service->store($request->validated(), $this->relations);
        if (${modelNameCamelCase}) {
            return redirect()->route('{indexRoute}', ${modelNameCamelCase}->id)->with('message' , __('site.stored_successfully'));
        }
        return redirect()->back()->with('error' , __('site.something_went_wrong'));
    }

    public function edit(${idVariable})
    {
        /** @var {modelName}|null ${modelNameCamelCase} */
        ${modelNameCamelCase} = $this->{modelNameCamelCase}Service->view(${idVariable}, $this->relations);

        if (${modelNameCamelCase}) {
            return view('{editForm}', compact(['{modelNameCamelCase}']));
        }

         return redirect()->back()->with('error' , __('site.there_is_no_data'));
    }

    public function update(StoreUpdate{modelName}Request $request, ${idVariable})
    {
        /** @var {modelName}|null $item */
        ${modelNameCamelCase} = $this->{modelNameCamelCase}Service->update($request->validated(), ${idVariable}, $this->relations);
        if (${modelNameCamelCase}) {
            return redirect()->route('{indexRoute}', ${idVariable})->with('message' , __('site.update_successfully'));
        }
        else return redirect()->back()->with('error' , __('site.there_is_no_data'));
    }

    public function destroy(${idVariable})
    {
        ${modelNameCamelCase} = $this->{modelNameCamelCase}Service->delete(${idVariable});

        if (${modelNameCamelCase}) {
            return response()->json(['message' => __('site.delete_successfully')]) ;
        }

        return redirect()->back()->with('error' , __('site.there_is_no_data'));
    }

    public function export(Request $request)
    {
        $ids = $request->ids ?? [];

        return $this->{modelNameCamelCase}Service->export($ids);
    }

    public function getImportExample()
    {
        return $this->{modelNameCamelCase}Service->getImportExample();
    }

    public function import(Request $request)
    {
        $request->validate([
            'excel_file' => 'required|mimes:xls,xlsx',
        ]);

        $this->{modelNameCamelCase}Service->import();
    }

    {additionalMethods}
}
